package teammates.common.datatransfer;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import teammates.common.util.FieldValidator;
import teammates.common.util.Sanitizer;
import teammates.common.util.FieldValidator.FieldType;
import teammates.storage.entity.FeedbackResponseComment;

import com.google.appengine.api.datastore.Text;

public class FeedbackResponseCommentAttributes extends EntityAttributes {

	private Long feedbackResponseCommentId = null;
	public String courseId;
	public String feedbackSessionName;
	public String feedbackQuestionId;
	public String giverEmail;
	public String feedbackResponseId;
	public Date createdAt;
	public Text commentText;

	public FeedbackResponseCommentAttributes(){
		
	}
	
	public FeedbackResponseCommentAttributes(String courseId,
			String feedbackSessionName, String feedbackQuestionId,
			String giverEmail, String feedbackResponseId, Date createdAt,
			Text commentText) {
		this.feedbackResponseCommentId = null; //Auto generated by GAE
		this.courseId = courseId;
		this.feedbackSessionName = feedbackSessionName;
		this.feedbackQuestionId = feedbackQuestionId;
		this.giverEmail = giverEmail;
		this.feedbackResponseId = feedbackResponseId;
		this.createdAt = createdAt;
		this.commentText = commentText;
	}
	
	public FeedbackResponseCommentAttributes(FeedbackResponseComment comment) {
		this.feedbackResponseCommentId = comment.getFeedbackResponseCommentId();
		this.courseId = comment.getCourseId();
		this.feedbackSessionName = comment.getFeedbackSessionName();
		this.feedbackQuestionId = comment.getFeedbackQuestionId();
		this.giverEmail = comment.getGiverEmail();
		this.feedbackResponseId = comment.getFeedbackResponseId();
		this.createdAt = comment.getCreatedAt();
		this.commentText = comment.getCommentText();
	}
	
	public Long getId() {
		return feedbackResponseCommentId;
	}
	
	/** 
	 * Use only to match existing and known Comment
	 */
	public void setId(Long id){
		this.feedbackResponseCommentId = id;
	}
	
	@Override
	public List<String> getInvalidityInfo() {
		FieldValidator validator = new FieldValidator();
		List<String> errors = new ArrayList<String>();
		String error;
		
		error= validator.getInvalidityInfo(FieldType.COURSE_ID, courseId);
		if(!error.isEmpty()) { errors.add(error); }
		
		error= validator.getInvalidityInfo(FieldType.FEEDBACK_SESSION_NAME, feedbackSessionName);
		if(!error.isEmpty()) { errors.add(error); }
		
		error= validator.getInvalidityInfo(FieldType.EMAIL, giverEmail);
		if(!error.isEmpty()) { errors.add(error); }
		
		return errors;
	}

	@Override
	public FeedbackResponseComment toEntity() {
		return new FeedbackResponseComment(courseId, feedbackSessionName,
				feedbackQuestionId, giverEmail, feedbackResponseId, createdAt,
				commentText);
	}

	@Override
	public String getIdentificationString() {
		return toString();
	}

	@Override
	public String getEntityTypeAsString() {
		return "FeedbackResponseComment";
	}

	@Override
	public void sanitizeForSaving() {
		this.courseId = this.courseId.trim();
		this.feedbackSessionName = this.feedbackSessionName.trim();
		this.commentText = Sanitizer.sanitizeTextField(this.commentText);
	}
	
	@Override
	public String toString() {
		return "FeedbackResponseCommentAttributes ["
				+ "feedbackResponseCommentId = " + feedbackResponseCommentId 
				+ ", courseId = " + courseId 
				+ ", feedbackSessionName = " + feedbackSessionName
				+ ", feedbackQuestionId = " + feedbackQuestionId
				+ ", giverEmail = " + giverEmail 
				+ ", feedbackResponseId = " + feedbackResponseId
				+ ", commentText = " + commentText 
				+ ", createdAt = " + createdAt + "]";
	}
}
